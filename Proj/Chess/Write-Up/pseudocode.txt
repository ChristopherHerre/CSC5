void main
{
	// Map file positions for all Pieces to coordinates like A0-H7
	// Read the blank Board file and overwrite the last game file
	Piece **all = new Piece*[32];
    	Piece **pawns = new Piece*[16];
    	Piece **knights = new Piece*[4];
    	Piece **bishops = new Piece*[4];
    	Piece **rooks = new Piece*[4];
    	Piece **kings = new Piece*[2];
    	Piece **queens = new Piece*[2];
    	Piece **piece = new Piece*[1];
	FOR ALL Pawns
		// Initialize a Pawn instance at a starting coordinate
		// Set its symbol capital or lowercase
		// Set **all at CURRENT_INDEX + OFFSET = **pawns at CURRENT_INDEX
	END FOR ALL
	FOR ALL Knights
		// Initialize a Knight instance at a starting coordinate
		// Set its symbol capital or lowercase
		// Set **all at CURRENT_INDEX + OFFSET = **knights at CURRENT_INDEX
	END FOR ALL
	// do the same for all arrays above, except **piece
	.
	.
	.
	FOR ALL Queens
		// Initialize a Queen instance at a starting coordinate
		// Set its symbol capital or lowercase
		// Set **all at CURRENT_INDEX + OFFSET = **queens at CURRENT_INDEX
	END FOR ALL
	short turn = 0;
	// open the game file for reading and writing
	// Write the Pieces onto the Board at starting positions previously defined
	// Draw the game Board
	// Close the game file
	WHILE a king on either side has NOT been captured
		// Reopen the game file as fstream f
		collectInput(input, input2, all, piece, f, m, col, turn, kings);
		// Close f after each iteration
	END WHILE
	// See if magenta's king was captured
		// If yes, say magenta lost
	// See if cyan's king was captured
		// If yes, say cyan lost
	// cleanup dynamic memory
}

bool proceed
{
	// if magenta's turn, prompt for input
	// else if cyan's turn, prompt for input
	// show input instructions
	// check if input is valid
		// if not return false
	piece[0] = NULL;
	// set piece[0] to the Piece at the position the player specified
	// if not piece exists at the specified position, return false
	// check if the wrong player is taking a turn
		// if yes, then return false
	return true;
	
}

void collectInput
{
	bool add = true;
	if (!proceed(piece, all, input, turn))
        	return;
	vector<string> v = piece[0]->getAvailPositions(all);
    	sort(v.begin(), v.end());
	// if no available moves
		// print position not available
		add = false;
		return;
	// open game file for reading and writing
	// display hint *s on the available positions
	// Rewrite all 32 Pieces on their current positions
	// Redraw the Board
	// Prompt for the destination location
	// validate the destination input
	// if availablePositions contains destination input
		// move piece[0] to the destination
		// redraw the Board
	// else
		// set the hints to blank spaces
		// redraw the Board
		add = false;
	if (add)
		turn++;
}
